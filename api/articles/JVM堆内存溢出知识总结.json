{"title":"JVM堆内存溢出","uid":"7d5f25cb15d343c48efb9c55d7226b5c","slug":"JVM堆内存溢出知识总结","date":"2025-02-23T14:09:53.000Z","updated":"2025-02-23T14:09:53.000Z","comments":true,"path":"api/articles/JVM堆内存溢出知识总结.json","keywords":null,"cover":"/images/database.jpg","content":"<h1 id=\"JVM堆内存溢出知识总结\"><a href=\"#JVM堆内存溢出知识总结\" class=\"headerlink\" title=\"JVM堆内存溢出知识总结\"></a><strong>JVM堆内存溢出知识总结</strong></h1><hr>\n<h3 id=\"一、常见内存溢出类型\"><a href=\"#一、常见内存溢出类型\" class=\"headerlink\" title=\"一、常见内存溢出类型\"></a><strong>一、常见内存溢出类型</strong></h3><ol>\n<li><p><strong>堆内存溢出（Heap OOM）</strong><br>• <strong>触发原因</strong>：对象过多且无法被GC回收（内存泄漏、大对象未释放等）。<br>• <strong>异常类型</strong>：<br>  ◦ **<code>OutOfMemoryError: Java heap space</code>**：堆内存耗尽，无法分配新对象。<br>  ◦ **<code>OutOfMemoryError: GC overhead limit exceeded</code>**：GC耗时超过98%且回收内存不足2%（Hotspot VM策略，避免无效GC）。  </p>\n</li>\n<li><p><strong>元空间内存溢出（Metaspace OOM）</strong><br>• <strong>触发原因</strong>：加载类过多（动态生成类、类加载器未清理）。<br>• <strong>异常信息</strong>：<code>java.lang.OutOfMemoryError: Metaspace</code>（JDK8后替代永久代）。<br>• <strong>特点</strong>：通常直接导致Java进程崩溃。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"二、溢出场景影响\"><a href=\"#二、溢出场景影响\" class=\"headerlink\" title=\"二、溢出场景影响\"></a><strong>二、溢出场景影响</strong></h3><p>• <strong>Java Heap OOM</strong>：<br>  • 若在Web接口请求中触发且全局异常捕获未处理OOM，进程可能存活但无法处理后续请求，进入不稳定状态。<br>• <strong>Metaspace OOM</strong>：<br>  • 进程通常直接崩溃。</p>\n<hr>\n<h3 id=\"三、应对OOM的解决方案\"><a href=\"#三、应对OOM的解决方案\" class=\"headerlink\" title=\"三、应对OOM的解决方案\"></a><strong>三、应对OOM的解决方案</strong></h3><ol>\n<li><p><strong>监控与告警</strong><br>• 使用工具（VisualVM、Prometheus + JMX Exporter）监控JVM状态，关注GC日志和内存使用率。  </p>\n</li>\n<li><p><strong>优化与修复</strong><br>• <strong>生成Heap Dump</strong>：<br>  ◦ 启动参数 <code>-XX:+HeapDumpOnOutOfMemoryError</code>（自动生成Dump文件）。<br>  ◦ 手动生成：<code>jmap -dump:format=b file=&lt;文件名.hprof&gt; &lt;pid&gt;</code>。<br>• <strong>分析Dump文件</strong>：<br>  ◦ 工具：MAT（Eclipse Memory Analyzer）、VisualVM。<br>• <strong>检查内存泄漏</strong>：如未关闭资源、静态集合缓存等。  </p>\n</li>\n<li><p><strong>配置调优</strong><br>• <strong>堆内存</strong>：调整 <code>-Xmx</code>（最大堆）、<code>-Xms</code>（初始堆）。<br>• <strong>元空间</strong>：限制大小 <code>-XX:MaxMetaspaceSize</code>。<br>• <strong>快速失败机制</strong>：启用 <code>-XX:+ExitOnOutOfMemoryError</code> 避免僵尸进程。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"四、核心要点\"><a href=\"#四、核心要点\" class=\"headerlink\" title=\"四、核心要点\"></a><strong>四、核心要点</strong></h3><p>• <strong>堆内存溢出</strong>关注对象分配与回收效率，<strong>元空间溢出</strong>关注类加载管理。<br>• <strong>Heap Dump分析</strong>是定位内存泄漏的关键步骤。<br>• <strong>配置调优需结合场景</strong>（如避免过度限制Metaspace动态扩展）。  </p>\n<p>通过监控、分析、调优三步法，可有效预防和解决JVM内存溢出问题。</p>\n","feature":true,"text":"Heap Dump分析是定位内存泄漏的关键步骤...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":17,"path":"api/categories/编程.json"}],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM%E5%A0%86%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">JVM堆内存溢出知识总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">一、常见内存溢出类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%BA%A2%E5%87%BA%E5%9C%BA%E6%99%AF%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">二、溢出场景影响</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%BA%94%E5%AF%B9OOM%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">三、应对OOM的解决方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%A0%B8%E5%BF%83%E8%A6%81%E7%82%B9\"><span class=\"toc-text\">四、核心要点</span></a></li></ol></li></ol></li></ol>","author":{"name":"Dxc","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"Free will is not free. <br /> @ <b>公众号：精准拔草</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"线上JVM OOM问题排查、解决","uid":"d5fb0aaa99438763a2290106469c53fe","slug":"线上JVM OOM问题，如何排查和解决","date":"2024-09-13T14:09:53.000Z","updated":"2024-09-13T14:09:53.000Z","comments":true,"path":"api/articles/线上JVM OOM问题，如何排查和解决.json","keywords":null,"cover":"/images/log.jpg","text":"增加内存、优化代码、调优垃圾回收器参数和管理外部资源...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":17,"path":"api/categories/编程.json"}],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"}],"author":{"name":"Dxc","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"Free will is not free. <br /> @ <b>公众号：精准拔草</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}