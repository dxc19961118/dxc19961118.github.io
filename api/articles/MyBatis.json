{"title":"MyBatis里的#{}与${}","uid":"a913954b5ef24db41b6d947f05c6c6ca","slug":"MyBatis","date":"2021-08-19T14:09:53.000Z","updated":"2021-08-19T14:09:53.000Z","comments":true,"path":"api/articles/MyBatis.json","keywords":null,"cover":"/images/mybatis.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在现代软件开发过程中，数据持久化是一个重要的环节，而MyBatis作为一个流行的持久层框架，广泛应用于多种商业和开源项目中。它通过简化JDBC的代码，提供了一种相对轻便的数据库操作方式。在使用MyBatis进行数据库操作时，我们经常会遇到两种占位符：#{}与${}。本文旨在深入讨论这两种占位符的区别与应用，帮助开发者在实际开发中做出更合适的选择。🚀</p>\n<h2 id=\"第一部分：基础知识回顾\"><a href=\"#第一部分：基础知识回顾\" class=\"headerlink\" title=\"第一部分：基础知识回顾\"></a>第一部分：基础知识回顾</h2><h3 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h3><p>MyBatis是一个半ORM（Object Relational Mapping）框架，它提供了JDBC的抽象封装，让开发者可以更专注于SQL本身，而不是繁琐的JDBC代码和数据库连接。通过XML或者注解的方式配置映射关系，实现对象与数据库之间的映射。</p>\n<h3 id=\"占位符-与-的基本认识\"><a href=\"#占位符-与-的基本认识\" class=\"headerlink\" title=\"占位符#{}与${}的基本认识\"></a>占位符#{}与${}的基本认识</h3><p>在MyBatis中，我们经常会用到占位符#{}与${}，它们都可以在XML映射文件中用来传递参数，但它们之间存在着本质的区别：</p>\n<ul>\n<li><code>#&#123;&#125;</code> 用于传递参数，Mybatis会将SQL中的<code>#&#123;&#125;</code>替换为<code>?</code>，并调用PreparedStatement的setXXX方法来安全地设置参数值。</li>\n<li><code>$&#123;&#125;</code> 用于拼接SQL脚本，Mybatis会直接将<code>$&#123;&#125;</code>替换为变量的值。</li>\n</ul>\n<h2 id=\"第二部分：详解-占位符\"><a href=\"#第二部分：详解-占位符\" class=\"headerlink\" title=\"第二部分：详解#{}占位符\"></a>第二部分：详解#{}占位符</h2><h3 id=\"的工作原理\"><a href=\"#的工作原理\" class=\"headerlink\" title=\"#{}的工作原理\"></a>#{}的工作原理</h3><p>当MyBatis遇到<code>#&#123;&#125;</code>时，它会生成一个PreparedStatement对象，并替换掉里面的<code>#&#123;&#125;</code>占位符为<code>?</code>，然后根据参数的数据类型调用相应的PreparedStatement.setXXX()方法设置参数值，这一过程既保证了SQL的动态拼接，也避免了SQL注入的安全风险。</p>\n<h3 id=\"的使用场景\"><a href=\"#的使用场景\" class=\"headerlink\" title=\"#{}的使用场景\"></a>#{}的使用场景</h3><p><code>#&#123;&#125;</code>适用于大部分的参数传递场景，尤其是在需要预防SQL注入的场景下，例如：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">xml复制代码&lt;select id&#x3D;&quot;selectUser&quot; resultType&#x3D;&quot;User&quot;&gt;\n  SELECT * FROM users WHERE id &#x3D; #&#123;id&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"与PreparedStatement的关系\"><a href=\"#与PreparedStatement的关系\" class=\"headerlink\" title=\"#{}与PreparedStatement的关系\"></a>#{}与PreparedStatement的关系</h3><p>如上文所述，<code>#&#123;&#125;</code>在MyBatis内部是通过PreparedStatement实现的，这是JDBC提供的一种预编译的SQL语句对象，可以有效预防SQL注入攻击。</p>\n<h3 id=\"的优点\"><a href=\"#的优点\" class=\"headerlink\" title=\"#{}的优点\"></a>#{}的优点</h3><ul>\n<li>安全：自动预防SQL注入攻击。</li>\n<li>易用：自动进行Java类型到JDBC类型的转换。</li>\n</ul>\n<h2 id=\"第三部分：详解-占位符\"><a href=\"#第三部分：详解-占位符\" class=\"headerlink\" title=\"第三部分：详解${}占位符\"></a>第三部分：详解${}占位符</h2><h3 id=\"的工作原理-1\"><a href=\"#的工作原理-1\" class=\"headerlink\" title=\"${}的工作原理\"></a>${}的工作原理</h3><p>与<code>#&#123;&#125;</code>不同，当MyBatis遇到<code>$&#123;&#125;</code>时，它仅仅是将<code>$&#123;&#125;</code>替换为变量的直接字符串值，这个过程类似于字符串拼接，因此，使用<code>$&#123;&#125;</code>需要格外小心，避免出现SQL注入的风险。</p>\n<h3 id=\"的使用场景-1\"><a href=\"#的使用场景-1\" class=\"headerlink\" title=\"${}的使用场景\"></a>${}的使用场景</h3><p>尽管存在安全风险，<code>$&#123;&#125;</code>在某些场合仍然很有用，例如动态表名或列名，这是<code>#&#123;&#125;</code>无法做到的：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">xml复制代码&lt;select id&#x3D;&quot;selectByDynamicColumn&quot; resultType&#x3D;&quot;Map&quot;&gt;\n  SELECT * FROM users WHERE $&#123;columnName&#125; &#x3D; #&#123;value&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"的风险与防范\"><a href=\"#的风险与防范\" class=\"headerlink\" title=\"${}的风险与防范\"></a>${}的风险与防范</h3><ul>\n<li>风险：可能导致SQL注入。</li>\n<li>防范：尽可能避免使用<code>$&#123;&#125;</code>进行用户输入的直接拼接，或者通过白名单校验输入内容。</li>\n</ul>\n<h3 id=\"与Statement的关系\"><a href=\"#与Statement的关系\" class=\"headerlink\" title=\"${}与Statement的关系\"></a>${}与Statement的关系</h3><p><code>$&#123;&#125;</code>的实现更接近于传统的Statement用法，Statement可以执行动态SQL，但相比于PreparedStatement，它在处理参数方面不够安全，容易受到SQL注入攻击。</p>\n<h2 id=\"第四部分：-与-的核心区别\"><a href=\"#第四部分：-与-的核心区别\" class=\"headerlink\" title=\"第四部分：#{}与${}的核心区别\"></a>第四部分：#{}与${}的核心区别</h2><ul>\n<li><strong>参数处理方式的区别</strong>：<code>#&#123;&#125;</code>通过PreparedStatement处理参数，而<code>$&#123;&#125;</code>通过字符串拼接。</li>\n<li><strong>安全性对比</strong>：<code>#&#123;&#125;</code>更为安全，能有效预防SQL注入，<code>$&#123;&#125;</code>使用不当容易导致安全问题。</li>\n<li><strong>性能考量</strong>：通常，预编译的PreparedStatement会有更好的性能，特别是在执行相同SQL但参数不同的场景下。</li>\n<li><strong>使用场景对比</strong>：<code>#&#123;&#125;</code>适合绝大多数场景，<code>$&#123;&#125;</code>适用于动态SQL段，如动态表名、列名。</li>\n</ul>\n<h2 id=\"第五部分：最佳实践与应用建议\"><a href=\"#第五部分：最佳实践与应用建议\" class=\"headerlink\" title=\"第五部分：最佳实践与应用建议\"></a>第五部分：最佳实践与应用建议</h2><p>在MyBatis中，合理的选择和使用占位符对保证SQL执行效率和防范安全风险都至关重要：</p>\n<ul>\n<li><strong>尽量使用<code>#&#123;&#125;</code>进行参数绑定。</strong></li>\n<li>如果不得不使用<code>$&#123;&#125;</code>，确保输入来源安全或做好输入内容的验证。</li>\n<li>结合具体业务场景，选择最适合的占位符，避免一刀切。</li>\n</ul>\n<h2 id=\"第六部分：案例分析\"><a href=\"#第六部分：案例分析\" class=\"headerlink\" title=\"第六部分：案例分析\"></a>第六部分：案例分析</h2><h3 id=\"案例一：动态SQL使用-的场景分析\"><a href=\"#案例一：动态SQL使用-的场景分析\" class=\"headerlink\" title=\"案例一：动态SQL使用${}的场景分析\"></a>案例一：动态SQL使用${}的场景分析</h3><p>假设需要根据不同的业务需要查询不同的表：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;select id&#x3D;&quot;selectFromDynamicTable&quot; parameterType&#x3D;&quot;Map&quot; resultType&#x3D;&quot;Map&quot;&gt;\n  SELECT * FROM $&#123;tableName&#125; WHERE name &#x3D; #&#123;name&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"案例二：使用-进行参数绑定的实例\"><a href=\"#案例二：使用-进行参数绑定的实例\" class=\"headerlink\" title=\"案例二：使用#{}进行参数绑定的实例\"></a>案例二：使用#{}进行参数绑定的实例</h3><p>查询特定用户名的用户信息：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;select id&#x3D;&quot;findUserByName&quot; resultType&#x3D;&quot;User&quot;&gt;\n  SELECT * FROM users WHERE username &#x3D; #&#123;name&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"案例三：错误使用-导致的安全问题及其修复\"><a href=\"#案例三：错误使用-导致的安全问题及其修复\" class=\"headerlink\" title=\"案例三：错误使用${}导致的安全问题及其修复\"></a>案例三：错误使用${}导致的安全问题及其修复</h3><p>错误示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;select id&#x3D;&quot;findByUsername&quot; resultType&#x3D;&quot;User&quot;&gt;\n  SELECT * FROM users WHERE username &#x3D; &#39;$&#123;username&#125;&#39;\n&lt;&#x2F;select&gt;</code></pre>\n\n<p>修复建议：将<code>$&#123;&#125;</code>改为<code>#&#123;&#125;</code>，确保通过PreparedStatement进行处理。</p>\n<h2 id=\"第七部分：常见问题解答-Q-amp-A\"><a href=\"#第七部分：常见问题解答-Q-amp-A\" class=\"headerlink\" title=\"第七部分：常见问题解答(Q&amp;A)\"></a>第七部分：常见问题解答(Q&amp;A)</h2><p><strong>#{}与${}可以混合使用吗？</strong></p>\n<p>可以，但建议根据具体场景谨慎选择。</p>\n<p><strong>MyBatis是如何处理null值的？</strong></p>\n<p>使用<code>#&#123;&#125;</code>时，MyBatis可以处理null值，将其转换为相应的JDBC类型。</p>\n<p><strong>如果遇到MyBatis参数替换不正确如何调试？</strong></p>\n<ul>\n<li>检查MyBatis配置文件。</li>\n<li>通过日志输出实际执行的SQL语句。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>在MyBatis开发过程中，正确理解和使用<code>#&#123;&#125;</code>与<code>$&#123;&#125;</code>对于保证SQL的效率和安全至关重要。开发者需要根据实际的开发场景，合理选择占位符，从而在保证开发效率的同时，也确保了应用的安全性。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>MyBatis官方文档: <a href=\"https://link.juejin.cn/?target=https://mybatis.org/mybatis-3/\">MyBatis</a></li>\n<li>SQL注入攻击预防: <a href=\"https://link.juejin.cn/?target=https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP Guide</a></li>\n</ul>\n","text":"MyBatis里的占位符...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":17,"path":"api/categories/编程.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":1,"path":"api/tags/MyBatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">第一部分：基础知识回顾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">MyBatis简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%A0%E4%BD%8D%E7%AC%A6-%E4%B8%8E-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86\"><span class=\"toc-text\">占位符#{}与${}的基本认识</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%EF%BC%9A%E8%AF%A6%E8%A7%A3-%E5%8D%A0%E4%BD%8D%E7%AC%A6\"><span class=\"toc-text\">第二部分：详解#{}占位符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">#{}的工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">#{}的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8EPreparedStatement%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">#{}与PreparedStatement的关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">#{}的优点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%EF%BC%9A%E8%AF%A6%E8%A7%A3-%E5%8D%A0%E4%BD%8D%E7%AC%A6\"><span class=\"toc-text\">第三部分：详解${}占位符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-1\"><span class=\"toc-text\">${}的工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1\"><span class=\"toc-text\">${}的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E9%A3%8E%E9%99%A9%E4%B8%8E%E9%98%B2%E8%8C%83\"><span class=\"toc-text\">${}的风险与防范</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8EStatement%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">${}与Statement的关系</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%EF%BC%9A-%E4%B8%8E-%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">第四部分：#{}与${}的核心区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%EF%BC%9A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%BA%94%E7%94%A8%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">第五部分：最佳实践与应用建议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86%EF%BC%9A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">第六部分：案例分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81SQL%E4%BD%BF%E7%94%A8-%E7%9A%84%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">案例一：动态SQL使用${}的场景分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8-%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E7%9A%84%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">案例二：使用#{}进行参数绑定的实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%B8%89%EF%BC%9A%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8-%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">案例三：错误使用${}导致的安全问题及其修复</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94-Q-amp-A\"><span class=\"toc-text\">第七部分：常见问题解答(Q&amp;A)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%95\"><span class=\"toc-text\">附录</span></a></li></ol>","author":{"name":"Dxc","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"Free will is not free. <br /> @ <b>公众号：精准拔草</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"《大话数据结构》笔记","uid":"b0474c53e1f198f2627cd8a831a75f0b","slug":"《大话数据结构》笔记","date":"2022-08-12T14:09:53.000Z","updated":"2022-08-12T14:09:53.000Z","comments":true,"path":"api/articles/《大话数据结构》笔记.json","keywords":null,"cover":"/images/dataStructure.jpg","text":"程序 = 数据结构 + 算法...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"编程","slug":"编程","count":17,"path":"api/categories/编程.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"Dxc","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"Free will is not free. <br /> @ <b>公众号：精准拔草</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Java整理汇总","uid":"d321013777ddb01d6888d36204d6bd46","slug":"java整理2022","date":"2021-05-28T14:09:53.000Z","updated":"2021-05-28T14:09:53.000Z","comments":true,"path":"api/articles/java整理2022.json","keywords":null,"cover":"/images/log.jpg","text":"Java笔记...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"44 mins."},"categories":[{"name":"编程","slug":"编程","count":17,"path":"api/categories/编程.json"}],"tags":[{"name":"Java","slug":"Java","count":9,"path":"api/tags/Java.json"}],"author":{"name":"Dxc","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"Free will is not free. <br /> @ <b>公众号：精准拔草</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}